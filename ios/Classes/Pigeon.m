// Autogenerated from Pigeon (v3.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface PermissionResult ()
+ (PermissionResult *)fromMap:(NSDictionary *)dict;
+ (nullable PermissionResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HealthConnectData ()
+ (HealthConnectData *)fromMap:(NSDictionary *)dict;
+ (nullable HealthConnectData *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HealthConnectWorkoutData ()
+ (HealthConnectWorkoutData *)fromMap:(NSDictionary *)dict;
+ (nullable HealthConnectWorkoutData *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PermissionResult
+ (instancetype)makeWithPermissionType:(PermissionType)permissionType
    permissionStatus:(PermissionStatus)permissionStatus {
  PermissionResult* pigeonResult = [[PermissionResult alloc] init];
  pigeonResult.permissionType = permissionType;
  pigeonResult.permissionStatus = permissionStatus;
  return pigeonResult;
}
+ (PermissionResult *)fromMap:(NSDictionary *)dict {
  PermissionResult *pigeonResult = [[PermissionResult alloc] init];
  pigeonResult.permissionType = [GetNullableObject(dict, @"permissionType") integerValue];
  pigeonResult.permissionStatus = [GetNullableObject(dict, @"permissionStatus") integerValue];
  return pigeonResult;
}
+ (nullable PermissionResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [PermissionResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"permissionType" : @(self.permissionType),
    @"permissionStatus" : @(self.permissionStatus),
  };
}
@end

@implementation HealthConnectData
+ (instancetype)makeWithWeight:(nullable NSNumber *)weight
    height:(nullable NSNumber *)height {
  HealthConnectData* pigeonResult = [[HealthConnectData alloc] init];
  pigeonResult.weight = weight;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (HealthConnectData *)fromMap:(NSDictionary *)dict {
  HealthConnectData *pigeonResult = [[HealthConnectData alloc] init];
  pigeonResult.weight = GetNullableObject(dict, @"weight");
  pigeonResult.height = GetNullableObject(dict, @"height");
  return pigeonResult;
}
+ (nullable HealthConnectData *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [HealthConnectData fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"weight" : (self.weight ?: [NSNull null]),
    @"height" : (self.height ?: [NSNull null]),
  };
}
@end

@implementation HealthConnectWorkoutData
+ (instancetype)makeWithUuid:(nullable NSString *)uuid
    identifier:(nullable NSString *)identifier
    name:(nullable NSString *)name
    description:(nullable NSString *)description
    activity:(nullable NSString *)activity
    startTimestamp:(nullable NSNumber *)startTimestamp
    endTimestamp:(nullable NSNumber *)endTimestamp
    duration:(nullable NSNumber *)duration {
  HealthConnectWorkoutData* pigeonResult = [[HealthConnectWorkoutData alloc] init];
  pigeonResult.uuid = uuid;
  pigeonResult.identifier = identifier;
  pigeonResult.name = name;
  pigeonResult.description = description;
  pigeonResult.activity = activity;
  pigeonResult.startTimestamp = startTimestamp;
  pigeonResult.endTimestamp = endTimestamp;
  pigeonResult.duration = duration;
  return pigeonResult;
}
+ (HealthConnectWorkoutData *)fromMap:(NSDictionary *)dict {
  HealthConnectWorkoutData *pigeonResult = [[HealthConnectWorkoutData alloc] init];
  pigeonResult.uuid = GetNullableObject(dict, @"uuid");
  pigeonResult.identifier = GetNullableObject(dict, @"identifier");
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.description = GetNullableObject(dict, @"description");
  pigeonResult.activity = GetNullableObject(dict, @"activity");
  pigeonResult.startTimestamp = GetNullableObject(dict, @"startTimestamp");
  pigeonResult.endTimestamp = GetNullableObject(dict, @"endTimestamp");
  pigeonResult.duration = GetNullableObject(dict, @"duration");
  return pigeonResult;
}
+ (nullable HealthConnectWorkoutData *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [HealthConnectWorkoutData fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"uuid" : (self.uuid ?: [NSNull null]),
    @"identifier" : (self.identifier ?: [NSNull null]),
    @"name" : (self.name ?: [NSNull null]),
    @"description" : (self.description ?: [NSNull null]),
    @"activity" : (self.activity ?: [NSNull null]),
    @"startTimestamp" : (self.startTimestamp ?: [NSNull null]),
    @"endTimestamp" : (self.endTimestamp ?: [NSNull null]),
    @"duration" : (self.duration ?: [NSNull null]),
  };
}
@end

@interface HealthConnectHostApiCodecReader : FlutterStandardReader
@end
@implementation HealthConnectHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HealthConnectData fromMap:[self readValue]];
    
    case 129:     
      return [HealthConnectWorkoutData fromMap:[self readValue]];
    
    case 130:     
      return [PermissionResult fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HealthConnectHostApiCodecWriter : FlutterStandardWriter
@end
@implementation HealthConnectHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HealthConnectData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HealthConnectWorkoutData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PermissionResult class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HealthConnectHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HealthConnectHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HealthConnectHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HealthConnectHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HealthConnectHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    HealthConnectHostApiCodecReaderWriter *readerWriter = [[HealthConnectHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void HealthConnectHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HealthConnectHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.requestActivityRecognitionPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestActivityRecognitionPermissionWithCompletion:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(requestActivityRecognitionPermissionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestActivityRecognitionPermissionWithCompletion:^(PermissionResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.hasActivityRecognitionPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasActivityRecognitionPermissionWithError:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(hasActivityRecognitionPermissionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api hasActivityRecognitionPermissionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.requestOAuthPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestOAuthPermissionWithCompletion:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(requestOAuthPermissionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestOAuthPermissionWithCompletion:^(PermissionResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.hasOAuthPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasOAuthPermissionWithError:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(hasOAuthPermissionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api hasOAuthPermissionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.openSettings"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openSettingsWithError:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(openSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api openSettingsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.disconnect"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectWithCompletion:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(disconnectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectData"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHealthConnectDataWithCompletion:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(getHealthConnectDataWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getHealthConnectDataWithCompletion:^(HealthConnectData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectWorkoutsData"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHealthConnectWorkoutsDataWithCompletion:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(getHealthConnectWorkoutsDataWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getHealthConnectWorkoutsDataWithCompletion:^(NSArray<HealthConnectWorkoutData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectHostApi.subscribeToHealthConnectWorkoutsData"
        binaryMessenger:binaryMessenger
        codec:HealthConnectHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(subscribeToHealthConnectWorkoutsDataWithError:)], @"HealthConnectHostApi api (%@) doesn't respond to @selector(subscribeToHealthConnectWorkoutsDataWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api subscribeToHealthConnectWorkoutsDataWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface HealthConnectFlutterApiCodecReader : FlutterStandardReader
@end
@implementation HealthConnectFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HealthConnectWorkoutData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HealthConnectFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation HealthConnectFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HealthConnectWorkoutData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HealthConnectFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HealthConnectFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HealthConnectFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HealthConnectFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HealthConnectFlutterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    HealthConnectFlutterApiCodecReaderWriter *readerWriter = [[HealthConnectFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface HealthConnectFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation HealthConnectFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onWorkoutDataUpdatedHealthConnectWorkoutData:(HealthConnectWorkoutData *)arg_healthConnectWorkoutData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.HealthConnectFlutterApi.onWorkoutDataUpdated"
      binaryMessenger:self.binaryMessenger
      codec:HealthConnectFlutterApiGetCodec()];
  [channel sendMessage:@[arg_healthConnectWorkoutData ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
