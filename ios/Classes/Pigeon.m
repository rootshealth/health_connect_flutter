// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface HealthConnectInitializationParams ()
+ (HealthConnectInitializationParams *)fromMap:(NSDictionary *)dict;
+ (nullable HealthConnectInitializationParams *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HealthConnectData ()
+ (HealthConnectData *)fromMap:(NSDictionary *)dict;
+ (nullable HealthConnectData *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation HealthConnectInitializationParams
+ (instancetype)makeWithApiKey:(NSString *)apiKey {
  HealthConnectInitializationParams* pigeonResult = [[HealthConnectInitializationParams alloc] init];
  pigeonResult.apiKey = apiKey;
  return pigeonResult;
}
+ (HealthConnectInitializationParams *)fromMap:(NSDictionary *)dict {
  HealthConnectInitializationParams *pigeonResult = [[HealthConnectInitializationParams alloc] init];
  pigeonResult.apiKey = GetNullableObject(dict, @"apiKey");
  NSAssert(pigeonResult.apiKey != nil, @"");
  return pigeonResult;
}
+ (nullable HealthConnectInitializationParams *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [HealthConnectInitializationParams fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"apiKey" : (self.apiKey ?: [NSNull null]),
  };
}
@end

@implementation HealthConnectData
+ (instancetype)makeWithId:(NSString *)id
    data:(nullable NSString *)data {
  HealthConnectData* pigeonResult = [[HealthConnectData alloc] init];
  pigeonResult.id = id;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (HealthConnectData *)fromMap:(NSDictionary *)dict {
  HealthConnectData *pigeonResult = [[HealthConnectData alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.data = GetNullableObject(dict, @"data");
  return pigeonResult;
}
+ (nullable HealthConnectData *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [HealthConnectData fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"data" : (self.data ?: [NSNull null]),
  };
}
@end

@interface HealthConnectPluginCodecReader : FlutterStandardReader
@end
@implementation HealthConnectPluginCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HealthConnectData fromMap:[self readValue]];
    
    case 129:     
      return [HealthConnectInitializationParams fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HealthConnectPluginCodecWriter : FlutterStandardWriter
@end
@implementation HealthConnectPluginCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HealthConnectData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HealthConnectInitializationParams class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HealthConnectPluginCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HealthConnectPluginCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HealthConnectPluginCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HealthConnectPluginCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HealthConnectPluginGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    HealthConnectPluginCodecReaderWriter *readerWriter = [[HealthConnectPluginCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void HealthConnectPluginSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HealthConnectPlugin> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectPlugin.initialize"
        binaryMessenger:binaryMessenger
        codec:HealthConnectPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeParams:completion:)], @"HealthConnectPlugin api (%@) doesn't respond to @selector(initializeParams:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HealthConnectInitializationParams *arg_params = GetNullableObjectAtIndex(args, 0);
        [api initializeParams:arg_params completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectPlugin.requestPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestPermissionWithCompletion:)], @"HealthConnectPlugin api (%@) doesn't respond to @selector(requestPermissionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestPermissionWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectPlugin.getHealthConnectData"
        binaryMessenger:binaryMessenger
        codec:HealthConnectPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHealthConnectDataWithCompletion:)], @"HealthConnectPlugin api (%@) doesn't respond to @selector(getHealthConnectDataWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getHealthConnectDataWithCompletion:^(HealthConnectData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HealthConnectPlugin.hasPermission"
        binaryMessenger:binaryMessenger
        codec:HealthConnectPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasPermissionWithError:)], @"HealthConnectPlugin api (%@) doesn't respond to @selector(hasPermissionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api hasPermissionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
