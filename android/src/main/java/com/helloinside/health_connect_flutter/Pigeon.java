// Autogenerated from Pigeon (v4.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.helloinside.health_connect_flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum PermissionStatus {
    GRANTED(0),
    DENIED(1);

    private int index;
    private PermissionStatus(final int index) {
      this.index = index;
    }
  }

  public enum PermissionType {
    ACTIVITY_RECOGNITION(0),
    O_AUTH(1);

    private int index;
    private PermissionType(final int index) {
      this.index = index;
    }
  }

  public enum WorkoutActivityType {
    AEROBICS(0),
    ARCHERY(1),
    BADMINTON(2),
    BASEBALL(3),
    BASKETBALL(4),
    BIATHLON(5),
    BIKING(6),
    BIKING_HAND(7),
    BIKING_ROAD(8),
    BIKING_SPINNING(9),
    BIKING_STATIONARY(10),
    BIKING_UTILITY(11),
    BOXING(12),
    CALISTHENICS(13),
    CIRCUIT_TRAINING(14),
    CROSSFIT(15),
    CURLING(16),
    DANCING(17),
    DIVING(18),
    ELEVATOR(19),
    ELLIPTICAL(20),
    ERGOMETER(21),
    ESCALATOR(22),
    FENCING(23),
    FOOTBALL_AMERICAN(24),
    FOOTBALL_SOCCER(25),
    FRISBEE_DISC(26),
    GARDENING(27),
    GOLF(28),
    GUIDED_BREATHING(29),
    GYMNASTICS(30),
    HANDBALL(31),
    HIGH_INTENSITY_INTERVAL_TRAINING(32),
    HIKING(33),
    HOCKEY(34),
    HORSEBACK_RIDING(35),
    HOUSEWORK(36),
    ICE_SKATING(37),
    INTERVAL_TRAINING(38),
    IN_VEHICLE(39),
    JUMP_ROPE(40),
    KAYAKING(41),
    KETTLEBELL_TRAINING(42),
    KICKBOXING(43),
    KICK_SCOOTER(44),
    KITE_SURFING(45),
    MARTIAL_ARTS(46),
    MEDITATION(47),
    MIXED_MARTIAL_ARTS(48),
    OTHER(49),
    P90X(50),
    PARAGLIDING(51),
    PILATES(52),
    POLO(53),
    RACQUETBALL(54),
    ROCK_CLIMBING(55),
    ROWING(56),
    ROWING_MACHINE(57),
    RUGBY(58),
    RUNNING(59),
    RUNNING_JOGGING(60),
    RUNNING_SAND(61),
    RUNNING_TREADMILL(62),
    SAILING(63),
    SCUBA_DIVING(64),
    SKATEBOARDING(65),
    SKATING(66),
    SKATING_CROSS(67),
    SKATING_INDOOR(68),
    SKATING_INLINE(69),
    SKIING(70),
    SKIING_BACK_COUNTRY(71),
    SKIING_CROSS_COUNTRY(72),
    SKIING_DOWNHILL(73),
    SKIING_KITE(74),
    SKIING_ROLLER(75),
    SLEDDING(76),
    SLEEP(77),
    SLEEP_AWAKE(78),
    SLEEP_DEEP(79),
    SLEEP_LIGHT(80),
    SLEEP_REM(81),
    SNOWBOARDING(82),
    SNOWMOBILE(83),
    SNOWSHOEING(84),
    SOFTBALL(85),
    SQUASH(86),
    STAIR_CLIMBING(87),
    STAIR_CLIMBING_MACHINE(88),
    STAND_UP_PADDLE_BOARDING(89),
    STILL(90),
    STRENGTH_TRAINING(91),
    SURFING(92),
    SWIMMING(93),
    SWIMMING_OPEN_WATER(94),
    SWIMMING_POOL(95),
    TABLE_TENNIS(96),
    TEAM_SPORTS(97),
    TENNIS(98),
    TILTING(99),
    TREAD_MEAL(100),
    UNKNOWN(101),
    VOLLEYBALL(102),
    VOLLEYBALL_BEACH(103),
    VOLLEYBALL_INDOOR(104),
    WAKE_BOARDING(105),
    WALKING(106),
    WALKING_FITNESS(107),
    WALKING_NORDIC(108),
    WALKING_PACED(109),
    WALKING_STROLLER(110),
    WALKING_TREADMILL(111),
    WATER_POLO(112),
    WEIGHTLIFTING(113),
    WHEELCHAIR(114),
    WINDSURFING(115),
    YOGA(116),
    ZUMBA(117);

    private int index;
    private WorkoutActivityType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PermissionResult {
    private @NonNull PermissionType permissionType;
    public @NonNull PermissionType getPermissionType() { return permissionType; }
    public void setPermissionType(@NonNull PermissionType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"permissionType\" is null.");
      }
      this.permissionType = setterArg;
    }

    private @NonNull PermissionStatus permissionStatus;
    public @NonNull PermissionStatus getPermissionStatus() { return permissionStatus; }
    public void setPermissionStatus(@NonNull PermissionStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"permissionStatus\" is null.");
      }
      this.permissionStatus = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private PermissionResult() {}
    public static final class Builder {
      private @Nullable PermissionType permissionType;
      public @NonNull Builder setPermissionType(@NonNull PermissionType setterArg) {
        this.permissionType = setterArg;
        return this;
      }
      private @Nullable PermissionStatus permissionStatus;
      public @NonNull Builder setPermissionStatus(@NonNull PermissionStatus setterArg) {
        this.permissionStatus = setterArg;
        return this;
      }
      public @NonNull PermissionResult build() {
        PermissionResult pigeonReturn = new PermissionResult();
        pigeonReturn.setPermissionType(permissionType);
        pigeonReturn.setPermissionStatus(permissionStatus);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("permissionType", permissionType == null ? null : permissionType.index);
      toMapResult.put("permissionStatus", permissionStatus == null ? null : permissionStatus.index);
      return toMapResult;
    }
    static @NonNull PermissionResult fromMap(@NonNull Map<String, Object> map) {
      PermissionResult pigeonResult = new PermissionResult();
      Object permissionType = map.get("permissionType");
      pigeonResult.setPermissionType(permissionType == null ? null : PermissionType.values()[(int)permissionType]);
      Object permissionStatus = map.get("permissionStatus");
      pigeonResult.setPermissionStatus(permissionStatus == null ? null : PermissionStatus.values()[(int)permissionStatus]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HealthConnectData {
    private @Nullable Double weight;
    public @Nullable Double getWeight() { return weight; }
    public void setWeight(@Nullable Double setterArg) {
      this.weight = setterArg;
    }

    private @Nullable Double height;
    public @Nullable Double getHeight() { return height; }
    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    public static final class Builder {
      private @Nullable Double weight;
      public @NonNull Builder setWeight(@Nullable Double setterArg) {
        this.weight = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }
      public @NonNull HealthConnectData build() {
        HealthConnectData pigeonReturn = new HealthConnectData();
        pigeonReturn.setWeight(weight);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("weight", weight);
      toMapResult.put("height", height);
      return toMapResult;
    }
    static @NonNull HealthConnectData fromMap(@NonNull Map<String, Object> map) {
      HealthConnectData pigeonResult = new HealthConnectData();
      Object weight = map.get("weight");
      pigeonResult.setWeight((Double)weight);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      return pigeonResult;
    }
  }

  /**
   * A time interval predicate
   * [startDateInMsSinceEpoch] - the starting point of the time interval
   * [endDateInMsSinceEpoch] - the end point of the time interval
   *
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static class Predicate {
    private @NonNull Long startDateInMsSinceEpoch;
    public @NonNull Long getStartDateInMsSinceEpoch() { return startDateInMsSinceEpoch; }
    public void setStartDateInMsSinceEpoch(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startDateInMsSinceEpoch\" is null.");
      }
      this.startDateInMsSinceEpoch = setterArg;
    }

    private @NonNull Long endDateInMsSinceEpoch;
    public @NonNull Long getEndDateInMsSinceEpoch() { return endDateInMsSinceEpoch; }
    public void setEndDateInMsSinceEpoch(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endDateInMsSinceEpoch\" is null.");
      }
      this.endDateInMsSinceEpoch = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Predicate() {}
    public static final class Builder {
      private @Nullable Long startDateInMsSinceEpoch;
      public @NonNull Builder setStartDateInMsSinceEpoch(@NonNull Long setterArg) {
        this.startDateInMsSinceEpoch = setterArg;
        return this;
      }
      private @Nullable Long endDateInMsSinceEpoch;
      public @NonNull Builder setEndDateInMsSinceEpoch(@NonNull Long setterArg) {
        this.endDateInMsSinceEpoch = setterArg;
        return this;
      }
      public @NonNull Predicate build() {
        Predicate pigeonReturn = new Predicate();
        pigeonReturn.setStartDateInMsSinceEpoch(startDateInMsSinceEpoch);
        pigeonReturn.setEndDateInMsSinceEpoch(endDateInMsSinceEpoch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("startDateInMsSinceEpoch", startDateInMsSinceEpoch);
      toMapResult.put("endDateInMsSinceEpoch", endDateInMsSinceEpoch);
      return toMapResult;
    }
    static @NonNull Predicate fromMap(@NonNull Map<String, Object> map) {
      Predicate pigeonResult = new Predicate();
      Object startDateInMsSinceEpoch = map.get("startDateInMsSinceEpoch");
      pigeonResult.setStartDateInMsSinceEpoch((startDateInMsSinceEpoch == null) ? null : ((startDateInMsSinceEpoch instanceof Integer) ? (Integer)startDateInMsSinceEpoch : (Long)startDateInMsSinceEpoch));
      Object endDateInMsSinceEpoch = map.get("endDateInMsSinceEpoch");
      pigeonResult.setEndDateInMsSinceEpoch((endDateInMsSinceEpoch == null) ? null : ((endDateInMsSinceEpoch instanceof Integer) ? (Integer)endDateInMsSinceEpoch : (Long)endDateInMsSinceEpoch));
      return pigeonResult;
    }
  }

  /**
   * startTimestamp, endTimestamp end duration are represented in seconds
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static class HealthConnectWorkoutData {
    private @Nullable String uuid;
    public @Nullable String getUuid() { return uuid; }
    public void setUuid(@Nullable String setterArg) {
      this.uuid = setterArg;
    }

    private @Nullable String identifier;
    public @Nullable String getIdentifier() { return identifier; }
    public void setIdentifier(@Nullable String setterArg) {
      this.identifier = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable WorkoutActivityType activityType;
    public @Nullable WorkoutActivityType getActivityType() { return activityType; }
    public void setActivityType(@Nullable WorkoutActivityType setterArg) {
      this.activityType = setterArg;
    }

    private @Nullable Long startTimestamp;
    public @Nullable Long getStartTimestamp() { return startTimestamp; }
    public void setStartTimestamp(@Nullable Long setterArg) {
      this.startTimestamp = setterArg;
    }

    private @Nullable Long endTimestamp;
    public @Nullable Long getEndTimestamp() { return endTimestamp; }
    public void setEndTimestamp(@Nullable Long setterArg) {
      this.endTimestamp = setterArg;
    }

    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    public static final class Builder {
      private @Nullable String uuid;
      public @NonNull Builder setUuid(@Nullable String setterArg) {
        this.uuid = setterArg;
        return this;
      }
      private @Nullable String identifier;
      public @NonNull Builder setIdentifier(@Nullable String setterArg) {
        this.identifier = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable WorkoutActivityType activityType;
      public @NonNull Builder setActivityType(@Nullable WorkoutActivityType setterArg) {
        this.activityType = setterArg;
        return this;
      }
      private @Nullable Long startTimestamp;
      public @NonNull Builder setStartTimestamp(@Nullable Long setterArg) {
        this.startTimestamp = setterArg;
        return this;
      }
      private @Nullable Long endTimestamp;
      public @NonNull Builder setEndTimestamp(@Nullable Long setterArg) {
        this.endTimestamp = setterArg;
        return this;
      }
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      public @NonNull HealthConnectWorkoutData build() {
        HealthConnectWorkoutData pigeonReturn = new HealthConnectWorkoutData();
        pigeonReturn.setUuid(uuid);
        pigeonReturn.setIdentifier(identifier);
        pigeonReturn.setName(name);
        pigeonReturn.setDescription(description);
        pigeonReturn.setActivityType(activityType);
        pigeonReturn.setStartTimestamp(startTimestamp);
        pigeonReturn.setEndTimestamp(endTimestamp);
        pigeonReturn.setDuration(duration);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uuid", uuid);
      toMapResult.put("identifier", identifier);
      toMapResult.put("name", name);
      toMapResult.put("description", description);
      toMapResult.put("activityType", activityType == null ? null : activityType.index);
      toMapResult.put("startTimestamp", startTimestamp);
      toMapResult.put("endTimestamp", endTimestamp);
      toMapResult.put("duration", duration);
      return toMapResult;
    }
    static @NonNull HealthConnectWorkoutData fromMap(@NonNull Map<String, Object> map) {
      HealthConnectWorkoutData pigeonResult = new HealthConnectWorkoutData();
      Object uuid = map.get("uuid");
      pigeonResult.setUuid((String)uuid);
      Object identifier = map.get("identifier");
      pigeonResult.setIdentifier((String)identifier);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object activityType = map.get("activityType");
      pigeonResult.setActivityType(activityType == null ? null : WorkoutActivityType.values()[(int)activityType]);
      Object startTimestamp = map.get("startTimestamp");
      pigeonResult.setStartTimestamp((startTimestamp == null) ? null : ((startTimestamp instanceof Integer) ? (Integer)startTimestamp : (Long)startTimestamp));
      Object endTimestamp = map.get("endTimestamp");
      pigeonResult.setEndTimestamp((endTimestamp == null) ? null : ((endTimestamp instanceof Integer) ? (Integer)endTimestamp : (Long)endTimestamp));
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class HealthConnectHostApiCodec extends StandardMessageCodec {
    public static final HealthConnectHostApiCodec INSTANCE = new HealthConnectHostApiCodec();
    private HealthConnectHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return HealthConnectData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return HealthConnectWorkoutData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PermissionResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return Predicate.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HealthConnectData) {
        stream.write(128);
        writeValue(stream, ((HealthConnectData) value).toMap());
      } else 
      if (value instanceof HealthConnectWorkoutData) {
        stream.write(129);
        writeValue(stream, ((HealthConnectWorkoutData) value).toMap());
      } else 
      if (value instanceof PermissionResult) {
        stream.write(130);
        writeValue(stream, ((PermissionResult) value).toMap());
      } else 
      if (value instanceof Predicate) {
        stream.write(131);
        writeValue(stream, ((Predicate) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * flutter call native
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface HealthConnectHostApi {
    void requestActivityRecognitionPermission(Result<PermissionResult> result);
    @NonNull Boolean hasActivityRecognitionPermission();
    void requestOAuthPermission(Result<PermissionResult> result);
    @NonNull Boolean hasOAuthPermission();
    void openSettings();
    void disconnect(Result<Boolean> result);
    void getHealthConnectData(Result<HealthConnectData> result);
    void getHealthConnectWorkoutsData(@NonNull Predicate predicate, Result<List<HealthConnectWorkoutData>> result);
    void subscribeToHealthConnectWorkoutsData();

    /** The codec used by HealthConnectHostApi. */
    static MessageCodec<Object> getCodec() {
      return HealthConnectHostApiCodec.INSTANCE;
    }

    /**Sets up an instance of `HealthConnectHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HealthConnectHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.requestActivityRecognitionPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<PermissionResult> resultCallback = new Result<PermissionResult>() {
                public void success(PermissionResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestActivityRecognitionPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.hasActivityRecognitionPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.hasActivityRecognitionPermission();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.requestOAuthPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<PermissionResult> resultCallback = new Result<PermissionResult>() {
                public void success(PermissionResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestOAuthPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.hasOAuthPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.hasOAuthPermission();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.openSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.openSettings();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.disconnect(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<HealthConnectData> resultCallback = new Result<HealthConnectData>() {
                public void success(HealthConnectData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHealthConnectData(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectWorkoutsData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Predicate predicateArg = (Predicate)args.get(0);
              if (predicateArg == null) {
                throw new NullPointerException("predicateArg unexpectedly null.");
              }
              Result<List<HealthConnectWorkoutData>> resultCallback = new Result<List<HealthConnectWorkoutData>>() {
                public void success(List<HealthConnectWorkoutData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHealthConnectWorkoutsData(predicateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectHostApi.subscribeToHealthConnectWorkoutsData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.subscribeToHealthConnectWorkoutsData();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class HealthConnectFlutterApiCodec extends StandardMessageCodec {
    public static final HealthConnectFlutterApiCodec INSTANCE = new HealthConnectFlutterApiCodec();
    private HealthConnectFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return HealthConnectWorkoutData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HealthConnectWorkoutData) {
        stream.write(128);
        writeValue(stream, ((HealthConnectWorkoutData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * native call flutter
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class HealthConnectFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public HealthConnectFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return HealthConnectFlutterApiCodec.INSTANCE;
    }

    public void onWorkoutDataUpdated(@NonNull HealthConnectWorkoutData healthConnectWorkoutDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectFlutterApi.onWorkoutDataUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(healthConnectWorkoutDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
