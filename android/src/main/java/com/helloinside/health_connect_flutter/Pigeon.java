// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.helloinside.health_connect_flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HealthConnectData {
    private @Nullable Double weight;
    public @Nullable Double getWeight() { return weight; }
    public void setWeight(@Nullable Double setterArg) {
      this.weight = setterArg;
    }

    private @Nullable Double height;
    public @Nullable Double getHeight() { return height; }
    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    public static final class Builder {
      private @Nullable Double weight;
      public @NonNull Builder setWeight(@Nullable Double setterArg) {
        this.weight = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }
      public @NonNull HealthConnectData build() {
        HealthConnectData pigeonReturn = new HealthConnectData();
        pigeonReturn.setWeight(weight);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("weight", weight);
      toMapResult.put("height", height);
      return toMapResult;
    }
    static @NonNull HealthConnectData fromMap(@NonNull Map<String, Object> map) {
      HealthConnectData pigeonResult = new HealthConnectData();
      Object weight = map.get("weight");
      pigeonResult.setWeight((Double)weight);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HealthConnectWorkoutData {
    private @NonNull List<String> data;
    public @NonNull List<String> getData() { return data; }
    public void setData(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private HealthConnectWorkoutData() {}
    public static final class Builder {
      private @Nullable List<String> data;
      public @NonNull Builder setData(@NonNull List<String> setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull HealthConnectWorkoutData build() {
        HealthConnectWorkoutData pigeonReturn = new HealthConnectWorkoutData();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("data", data);
      return toMapResult;
    }
    static @NonNull HealthConnectWorkoutData fromMap(@NonNull Map<String, Object> map) {
      HealthConnectWorkoutData pigeonResult = new HealthConnectWorkoutData();
      Object data = map.get("data");
      pigeonResult.setData((List<String>)data);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class HealthConnectPluginCodec extends StandardMessageCodec {
    public static final HealthConnectPluginCodec INSTANCE = new HealthConnectPluginCodec();
    private HealthConnectPluginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return HealthConnectData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return HealthConnectWorkoutData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HealthConnectData) {
        stream.write(128);
        writeValue(stream, ((HealthConnectData) value).toMap());
      } else 
      if (value instanceof HealthConnectWorkoutData) {
        stream.write(129);
        writeValue(stream, ((HealthConnectWorkoutData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HealthConnectPlugin {
    void requestPermission();
    @NonNull Boolean hasPermission();
    void openSettings();
    void disconnect(Result<Void> result);
    void getHealthConnectData(Result<HealthConnectData> result);
    void getHealthConnectWorkoutData(Result<HealthConnectWorkoutData> result);

    /** The codec used by HealthConnectPlugin. */
    static MessageCodec<Object> getCodec() {
      return HealthConnectPluginCodec.INSTANCE;
    }

    /** Sets up an instance of `HealthConnectPlugin` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HealthConnectPlugin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.requestPermission();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.hasPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.hasPermission();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.openSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.openSettings();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.disconnect(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.getHealthConnectData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<HealthConnectData> resultCallback = new Result<HealthConnectData>() {
                public void success(HealthConnectData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHealthConnectData(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HealthConnectPlugin.getHealthConnectWorkoutData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<HealthConnectWorkoutData> resultCallback = new Result<HealthConnectWorkoutData>() {
                public void success(HealthConnectWorkoutData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHealthConnectWorkoutData(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
