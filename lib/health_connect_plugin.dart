// Autogenerated from Pigeon (v4.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum PermissionStatus {
  granted,
  denied,
}

enum PermissionType {
  activityRecognition,
  oAuth,
}

enum WorkoutActivityType {
  aerobics,
  archery,
  badminton,
  baseball,
  basketball,
  biathlon,
  biking,
  bikingHand,
  bikingRoad,
  bikingSpinning,
  bikingStationary,
  bikingUtility,
  boxing,
  calisthenics,
  circuitTraining,
  crossfit,
  curling,
  dancing,
  diving,
  elevator,
  elliptical,
  ergometer,
  escalator,
  fencing,
  footballAmerican,
  footballSoccer,
  frisbeeDisc,
  gardening,
  golf,
  guidedBreathing,
  gymnastics,
  handball,
  highIntensityIntervalTraining,
  hiking,
  hockey,
  horsebackRiding,
  housework,
  iceSkating,
  intervalTraining,
  inVehicle,
  jumpRope,
  kayaking,
  kettlebellTraining,
  kickboxing,
  kickScooter,
  kiteSurfing,
  martialArts,
  meditation,
  mixedMartialArts,
  other,
  p90x,
  paragliding,
  pilates,
  polo,
  racquetball,
  rockClimbing,
  rowing,
  rowingMachine,
  rugby,
  running,
  runningJogging,
  runningSand,
  runningTreadmill,
  sailing,
  scubaDiving,
  skateboarding,
  skating,
  skatingCross,
  skatingIndoor,
  skatingInline,
  skiing,
  skiingBackCountry,
  skiingCrossCountry,
  skiingDownhill,
  skiingKite,
  skiingRoller,
  sledding,
  sleep,
  sleepAwake,
  sleepDeep,
  sleepLight,
  sleepRem,
  snowboarding,
  snowmobile,
  snowshoeing,
  softball,
  squash,
  stairClimbing,
  stairClimbingMachine,
  standUpPaddleBoarding,
  still,
  strengthTraining,
  surfing,
  swimming,
  swimmingOpenWater,
  swimmingPool,
  tableTennis,
  teamSports,
  tennis,
  tilting,
  treadMeal,
  unknown,
  volleyball,
  volleyballBeach,
  volleyballIndoor,
  wakeBoarding,
  walking,
  walkingFitness,
  walkingNordic,
  walkingPaced,
  walkingStroller,
  walkingTreadmill,
  waterPolo,
  weightlifting,
  wheelchair,
  windsurfing,
  yoga,
  zumba,
}

class PermissionResult {
  PermissionResult({
    required this.permissionType,
    required this.permissionStatus,
  });

  PermissionType permissionType;
  PermissionStatus permissionStatus;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['permissionType'] = permissionType.index;
    pigeonMap['permissionStatus'] = permissionStatus.index;
    return pigeonMap;
  }

  static PermissionResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PermissionResult(
      permissionType: PermissionType.values[pigeonMap['permissionType']! as int]
,
      permissionStatus: PermissionStatus.values[pigeonMap['permissionStatus']! as int]
,
    );
  }
}

class HealthConnectData {
  HealthConnectData({
    this.weight,
    this.height,
  });

  double? weight;
  double? height;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['weight'] = weight;
    pigeonMap['height'] = height;
    return pigeonMap;
  }

  static HealthConnectData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HealthConnectData(
      weight: pigeonMap['weight'] as double?,
      height: pigeonMap['height'] as double?,
    );
  }
}

/// A time interval predicate
/// [startDateInMsSinceEpoch] - the starting point of the time interval
/// [endDateInMsSinceEpoch] - the end point of the time interval
///
class Predicate {
  Predicate({
    required this.startDateInMsSinceEpoch,
    required this.endDateInMsSinceEpoch,
  });

  int startDateInMsSinceEpoch;
  int endDateInMsSinceEpoch;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['startDateInMsSinceEpoch'] = startDateInMsSinceEpoch;
    pigeonMap['endDateInMsSinceEpoch'] = endDateInMsSinceEpoch;
    return pigeonMap;
  }

  static Predicate decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Predicate(
      startDateInMsSinceEpoch: pigeonMap['startDateInMsSinceEpoch']! as int,
      endDateInMsSinceEpoch: pigeonMap['endDateInMsSinceEpoch']! as int,
    );
  }
}

/// startTimestamp, endTimestamp end duration are represented in seconds
class HealthConnectWorkoutData {
  HealthConnectWorkoutData({
    this.uuid,
    this.identifier,
    this.name,
    this.description,
    this.activityType,
    this.startTimestamp,
    this.endTimestamp,
    this.duration,
  });

  String? uuid;
  String? identifier;
  String? name;
  String? description;
  WorkoutActivityType? activityType;
  int? startTimestamp;
  int? endTimestamp;
  int? duration;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['uuid'] = uuid;
    pigeonMap['identifier'] = identifier;
    pigeonMap['name'] = name;
    pigeonMap['description'] = description;
    pigeonMap['activityType'] = activityType?.index;
    pigeonMap['startTimestamp'] = startTimestamp;
    pigeonMap['endTimestamp'] = endTimestamp;
    pigeonMap['duration'] = duration;
    return pigeonMap;
  }

  static HealthConnectWorkoutData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HealthConnectWorkoutData(
      uuid: pigeonMap['uuid'] as String?,
      identifier: pigeonMap['identifier'] as String?,
      name: pigeonMap['name'] as String?,
      description: pigeonMap['description'] as String?,
      activityType: pigeonMap['activityType'] != null
          ? WorkoutActivityType.values[pigeonMap['activityType']! as int]
          : null,
      startTimestamp: pigeonMap['startTimestamp'] as int?,
      endTimestamp: pigeonMap['endTimestamp'] as int?,
      duration: pigeonMap['duration'] as int?,
    );
  }
}

class _HealthConnectHostApiCodec extends StandardMessageCodec {
  const _HealthConnectHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HealthConnectData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is HealthConnectWorkoutData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is PermissionResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is Predicate) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HealthConnectData.decode(readValue(buffer)!);
      
      case 129:       
        return HealthConnectWorkoutData.decode(readValue(buffer)!);
      
      case 130:       
        return PermissionResult.decode(readValue(buffer)!);
      
      case 131:       
        return Predicate.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

/// flutter call native
class HealthConnectHostApi {
  /// Constructor for [HealthConnectHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HealthConnectHostApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HealthConnectHostApiCodec();

  Future<PermissionResult> requestActivityRecognitionPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.requestActivityRecognitionPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PermissionResult?)!;
    }
  }

  Future<bool> hasActivityRecognitionPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.hasActivityRecognitionPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<PermissionResult> requestOAuthPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.requestOAuthPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PermissionResult?)!;
    }
  }

  Future<bool> hasOAuthPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.hasOAuthPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> openSettings() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.openSettings', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<bool> disconnect() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.disconnect', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<HealthConnectData> getHealthConnectData() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as HealthConnectData?)!;
    }
  }

  Future<List<HealthConnectWorkoutData?>> getHealthConnectWorkoutsData(Predicate arg_predicate) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.getHealthConnectWorkoutsData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_predicate]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as List<Object?>?)!.cast<HealthConnectWorkoutData?>();
    }
  }

  Future<void> subscribeToHealthConnectWorkoutsData() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HealthConnectHostApi.subscribeToHealthConnectWorkoutsData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _HealthConnectFlutterApiCodec extends StandardMessageCodec {
  const _HealthConnectFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HealthConnectWorkoutData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HealthConnectWorkoutData.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
/// native call flutter
abstract class HealthConnectFlutterApi {
  static const MessageCodec<Object?> codec = _HealthConnectFlutterApiCodec();

  void onWorkoutDataUpdated(HealthConnectWorkoutData healthConnectWorkoutData);
  static void setup(HealthConnectFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HealthConnectFlutterApi.onWorkoutDataUpdated', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.HealthConnectFlutterApi.onWorkoutDataUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final HealthConnectWorkoutData? arg_healthConnectWorkoutData = (args[0] as HealthConnectWorkoutData?);
          assert(arg_healthConnectWorkoutData != null, 'Argument for dev.flutter.pigeon.HealthConnectFlutterApi.onWorkoutDataUpdated was null, expected non-null HealthConnectWorkoutData.');
          api.onWorkoutDataUpdated(arg_healthConnectWorkoutData!);
          return;
        });
      }
    }
  }
}
